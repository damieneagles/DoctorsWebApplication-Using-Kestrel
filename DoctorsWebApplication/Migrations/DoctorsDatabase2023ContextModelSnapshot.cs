// <auto-generated />
using System;
using DoctorsWebApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorsWebApplication.Migrations
{
    [DbContext(typeof(DoctorsDatabase2023Context))]
    partial class DoctorsDatabase2023ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorsWebApplication.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("Address", null, t =>
                        {
                            t.HasTrigger("Update_Address_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndAppointment")
                        .HasColumnType("datetime");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAppointment")
                        .HasColumnType("datetime");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment", null, t =>
                        {
                            t.HasTrigger("Update_Appointment_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.AppointmentPayment", b =>
                {
                    b.Property<int>("AppointmentPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentPaymentId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorFeeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("AppointmentPaymentId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorFeeId");

                    b.ToTable("AppointmentPayment", null, t =>
                        {
                            t.HasTrigger("Update_AppointmentPayment_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("GPSurgeryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("DoctorId")
                        .HasName("PK_Doctor_1");

                    b.HasIndex(new[] { "PersonId" }, "IX_Doctor")
                        .IsUnique();

                    b.HasIndex(new[] { "GPSurgeryId" }, "IX_Doctor_GPSurgeryId");

                    b.ToTable("Doctor", null, t =>
                        {
                            t.HasTrigger("Update_Doctor_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.DoctorFee", b =>
                {
                    b.Property<int>("DoctorFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorFeeId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("DoctorFeeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FeeId");

                    b.ToTable("DoctorFee", null, t =>
                        {
                            t.HasTrigger("Update_DoctorFee_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugId"));

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MedicalName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("ReorderQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("money");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("DrugId")
                        .HasName("PK_PrescribedDrug");

                    b.ToTable("Drug", null, t =>
                        {
                            t.HasTrigger("Update_Drug_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.DrugSupplier", b =>
                {
                    b.Property<int>("DrugSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugSupplierId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("RRP")
                        .HasColumnType("money");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("money");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("DrugSupplierId");

                    b.HasIndex("DrugId");

                    b.HasIndex("SupplierId");

                    b.ToTable("DrugSupplier", null, t =>
                        {
                            t.HasTrigger("Update_DrugSupplier_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.EmailAddress", b =>
                {
                    b.Property<int>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAddressId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("EmailAddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("EmailAddress", null, t =>
                        {
                            t.HasTrigger("Update_EmailAddress_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"));

                    b.Property<bool>("BulkBilled")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("DoctorFee")
                        .HasColumnType("money");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("FeeId");

                    b.ToTable("Fee", null, t =>
                        {
                            t.HasTrigger("Update_Fee_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.GPSurgery", b =>
                {
                    b.Property<int>("GPSurgeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GPSurgeryId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("CurrentFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndConsultDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("StartConsultDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SurgeryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("GPSurgeryId")
                        .HasName("PK_DoctorsSurgery");

                    b.ToTable("GPSurgery", null, t =>
                        {
                            t.HasTrigger("Update_GPSurgery_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("PatientId")
                        .HasName("PK_Patient_1");

                    b.HasIndex("DoctorId");

                    b.HasIndex(new[] { "PersonId" }, "IX_Patient")
                        .IsUnique();

                    b.ToTable("Patient", null, t =>
                        {
                            t.HasTrigger("Update_Patient_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("PersonId");

                    b.ToTable("Person", null, t =>
                        {
                            t.HasTrigger("Update_Person_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberId"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumber", null, t =>
                        {
                            t.HasTrigger("Update_PhoneNumber_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.PrescribedDrug", b =>
                {
                    b.Property<int>("PrescribedDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescribedDrugId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("PrescribedDrugId")
                        .HasName("PK_PrescribedDrug_1");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.ToTable("PrescribedDrug", null, t =>
                        {
                            t.HasTrigger("Update_PrescribedDrug_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualificationId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Qualification1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Qualification");

                    b.Property<string>("Specialisation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("QualificationId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Qualification", null, t =>
                        {
                            t.HasTrigger("Update_Qualification_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier", null, t =>
                        {
                            t.HasTrigger("Update_Supplier_Modified");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Address", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Appointment", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Doctor");

                    b.HasOne("DoctorsWebApplication.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Patient");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.AppointmentPayment", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Appointment", "Appointment")
                        .WithMany("AppointmentPayments")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentPayment_Appointment");

                    b.HasOne("DoctorsWebApplication.Models.DoctorFee", "DoctorFee")
                        .WithMany("AppointmentPayments")
                        .HasForeignKey("DoctorFeeId")
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentPayment_DoctorFee");

                    b.Navigation("Appointment");

                    b.Navigation("DoctorFee");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Doctor", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.GPSurgery", "GPSurgery")
                        .WithMany("Doctors")
                        .HasForeignKey("GPSurgeryId")
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_GPSurgery");

                    b.HasOne("DoctorsWebApplication.Models.Person", "Person")
                        .WithOne("Doctor")
                        .HasForeignKey("DoctorsWebApplication.Models.Doctor", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Person");

                    b.Navigation("GPSurgery");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.DoctorFee", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Doctor", "Doctor")
                        .WithMany("DoctorFees")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_DoctorFee_Doctor");

                    b.HasOne("DoctorsWebApplication.Models.Fee", "Fee")
                        .WithMany("DoctorFees")
                        .HasForeignKey("FeeId")
                        .IsRequired()
                        .HasConstraintName("FK_DoctorFee_Fee");

                    b.Navigation("Doctor");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.DrugSupplier", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Drug", "Drug")
                        .WithMany("DrugSuppliers")
                        .HasForeignKey("DrugId")
                        .IsRequired()
                        .HasConstraintName("FK_DrugSupplier_Drug");

                    b.HasOne("DoctorsWebApplication.Models.Supplier", "Supplier")
                        .WithMany("DrugSuppliers")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_DrugSupplier_Supplier");

                    b.Navigation("Drug");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.EmailAddress", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Person", "Person")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_EmailAddress_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Patient", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Patient_Doctor");

                    b.HasOne("DoctorsWebApplication.Models.Person", "Person")
                        .WithOne("Patient")
                        .HasForeignKey("DoctorsWebApplication.Models.Patient", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Patient_Person");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.PhoneNumber", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumber_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.PrescribedDrug", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Doctor", "Doctor")
                        .WithMany("PrescribedDrugs")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_PrescribedDrug_Doctor");

                    b.HasOne("DoctorsWebApplication.Models.Drug", "Drug")
                        .WithMany("PrescribedDrugs")
                        .HasForeignKey("DrugId")
                        .IsRequired()
                        .HasConstraintName("FK_PrescribedDrug_Drug");

                    b.HasOne("DoctorsWebApplication.Models.Patient", "Patient")
                        .WithMany("PrescribedDrugs")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PrescribedDrug_Patient");

                    b.Navigation("Doctor");

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Qualification", b =>
                {
                    b.HasOne("DoctorsWebApplication.Models.Doctor", "Doctor")
                        .WithMany("Qualifications")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Qualification_Doctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentPayments");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorFees");

                    b.Navigation("Patients");

                    b.Navigation("PrescribedDrugs");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.DoctorFee", b =>
                {
                    b.Navigation("AppointmentPayments");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Drug", b =>
                {
                    b.Navigation("DrugSuppliers");

                    b.Navigation("PrescribedDrugs");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Fee", b =>
                {
                    b.Navigation("DoctorFees");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.GPSurgery", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PrescribedDrugs");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Doctor");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Patient");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("DoctorsWebApplication.Models.Supplier", b =>
                {
                    b.Navigation("DrugSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
